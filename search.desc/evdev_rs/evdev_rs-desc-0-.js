searchState.loadedDescShard("evdev_rs", 0, "Rust bindings to libevdev, a wrapper for evdev devices.\nused by EVIOCGABS/EVIOCSABS ioctls\nThe fd is not in O_NONBLOCK and a read may block\nOpaque struct representing an evdev device\nAbstraction over structs which contain an inner …\nTypes that can be enabled on a DeviceWrapper (i.e. …\nExtra data for use with enable_event_code\nPretend the next event is a SYN_DROPPED and require the …\nGrab the device if not currently grabbed\nThe event structure itself\nProcess data in normal mode\nTurn the LED off\nTurn the LED on\nProcess data in sync mode\n<code>next_event</code> has finished without an error and an event is …\nDepending on the <code>next_event</code> read flag: libevdev received a …\nOpaque struct representing an evdev uinput device\nUngrab the device if currently grabbed\nOpaque struct representing an evdev device with no backing …\nGet the axis info for the given axis, as advertised by the …\nGet the axis info for the given axis, as advertised by the …\nGet a flags value with all known bits set.\nReturn the file descriptor used to create this uinput …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChange the file for this device, without re-reading the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreate a uinput device based on the given libevdev device.\nGet the currently active slot.\nGet the currently active slot.\nReturn the device node representing this uinput device.\nThe intersection of a source flags value with the …\nForcibly disable an EventType/EventCode on this device, …\nForcibly disable an EventType/EventCode on this device, …\nForcibly disable an event code on this device, even if the …\nForcibly disable an event code on this device, even if the …\nForcibly disable an event type on this device, even if the …\nForcibly disable an event type on this device, even if the …\nReturn the driver version of a device already intialize …\nGet a flags value with all bits unset.\nForcibly enable an EventType/InputProp on this device, …\nForcibly enable an EventType/InputProp on this device, …\nForcibly enable an event type on this device, even if the …\nForcibly enable an event type on this device, even if the …\nForcibly enable an event type on this device, even if the …\nForcibly enable an event type on this device, even if the …\nEnables this property, a call to <code>set_file</code> will overwrite …\nEnables this property, a call to <code>set_file</code> will overwrite …\nReturns the current value of the event type.\nReturns the current value of the event type.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the file associated with the device\nvalues that are within this value will be discarded by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nspecifies fuzz value that is used to filter noise from the …\nGrab or ungrab the device through a kernel EVIOCGRAB.\nReturns <code>true</code> if device support the …\nReturns <code>true</code> if device support the …\nReturn <code>true</code> is the device support this event type and code …\nReturn <code>true</code> is the device support this event type and code …\nCheck if there are events waiting for us.\nReturns <code>true</code> is the device support this event type and …\nReturns <code>true</code> is the device support this event type and …\nReturns <code>true</code> if device support the property and false …\nReturns <code>true</code> if device support the property and false …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nTurn an LED on or off.\nspecifies maximum value for the axis\nspecifies minimum value for the axis\nGet device’s name, as set by the kernel, or overridden …\nGet device’s name, as set by the kernel, or overridden …\nInitialize a new libevdev device.\nInitialize a new libevdev device from the given file.\nOpens a device with the given path as the location of …\nGet the next event from the device. This function operates …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the number of slots supported by this device.\nGet the number of slots supported by this device.\nGet device’s physical location, as set by the kernel, or …\nGet device’s physical location, as set by the kernel, or …\nThe intersection of a source flags value with the …\nspecifies resolution for the values reported for the axis\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChange the abs info for the given EV_ABS event code, if …\nChange the abs info for the given EV_ABS event code, if …\nSet the clock ID to be used for timestamps. Further events …\nSet the value for a given event type and code.\nSet the value for a given event type and code.\nSet the file for this struct and initialize internal data.\nSet the device’s EV_ABS axis to the value defined in the …\nSet the value for a given code for the given slot.\nSet the value for a given code for the given slot.\nReturn the current value of the code for the given slot.\nReturn the current value of the code for the given slot.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the syspath representing this uinput device.\nThe time at which event occured\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nFails if TimeVal.tv_usec is &gt;= 10^6 or if the TimeVal is …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet device’s unique identifier, as set by the kernel, or …\nGet device’s unique identifier, as set by the kernel, or …\nlatest reported value for the axis\nPost an event through the uinput device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe given type constant for the passed name or Errno if …\nLook up an event code by its type and name. Event codes …\nLook up an input property by its name. Properties start …\nThe max value defined for the given event type, e.g. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ndebug information\ncritical errors and application bugs\ninformational messages\nReturns the argument unchanged.\nReturn the current log priority level. Messages higher …\nCalls <code>U::from(self)</code>.\nDefine the minimum level to be printed to the log handler. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")